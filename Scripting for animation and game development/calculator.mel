global proc float calculate(string $operation, float $numbers[])
{
    float $result;
    
    if ($operation == "Add") 
    {
        $result = 0;
        for ($num in $numbers)
        {
            $result += $num;
        }
    }
    else if ($operation == "Subtract")
    {
        $result = $numbers[0];
        for ($i = 1; $i < size($numbers); $i++)
        {
            $result -= $numbers[$i];
        }
    }
    else if ($operation == "Multiply")
    {
        $result = 1;
        for ($num in $numbers)
        {
            $result *= $num;
        }
    }
    else if ($operation == "Divide")
    {
        $result = $numbers[0];
        for ($i = 1; $i < size($numbers); $i++)
        {
            if ($numbers[$i] == 0)
            {
                error "You cannot divide by zero";
            }
            else
            {
                $result /= $numbers[$i];
            }
        }
    }
    else if ($operation == "Power")
    {
        if (size($numbers) == 2)
        {
            $result = 1;
            for ($i = 0; $i < $numbers[1]; $i++)
            {
                $result *= $numbers[0];
            }
        }
        else
        {
            error "Power operation requires two arguments: base and exponent.";
        }
    }
    else if ($operation == "Mean")
    {
        $result = 0;
        int $count = size($numbers);
        for ($num in $numbers)
        {
            $result += $num;
        }
        $result /= $count;
    }
    else if ($operation == "Median")
    {
        int $count = size($numbers);
        float $sortedNumbers[] = `sort $numbers`;

        if ($count % 2 == 0)
        {
            int $middle = $count / 2;
            $result = ($sortedNumbers[$middle - 1] + $sortedNumbers[$middle]) / 2.0;
        }
        else
        {
            int $middle = ($count - 1) / 2;
            $result = $sortedNumbers[$middle];
        }
    }
    else
    {
        error ("Invalid operation: " + $operation);
    }
    
    return $result;
}

global proc calculatorUI()
{
    global string $numberField[]; // Declare inside the procedure
    
    // Check if the window exists. If it does, delete it.
    if (`window -exists calcWindow`)
    {
        deleteUI -window calcWindow;
    }
    
    // Create main window
    window -title "Calculator" calcWindow;
    columnLayout -adjustableColumn true;
    
    // Dropdown for operations
    string $operations[] = {"Add", "Subtract", "Multiply", "Divide", "Power", "Mean", "Median"};
    optionMenu -label "Operation" operationMenu;
    for ($op in $operations)
    {
        menuItem -label $op;
    }

    // TextFields for numbers
    text -label "Numbers:";
    rowLayout -numberOfColumns 2 numbersRow;
    for ($i = 0; $i < 2; $i++)
    {
        $numberField[$i] = `textField -width 40`; // Assign the name to the global array
    }
    setParent ..;

    // Button to execute
    button -label "Calculate" -command "executeCalculation()";

    // Result field
    textFieldGrp -label "Result" -editable false resultField;

    // Display the window
    showWindow calcWindow;
}

global proc executeCalculation()
{
    global string $numberField[]; // Declare inside the procedure

    string $operation = `optionMenu -query -value operationMenu`;
    float $numbers[];

    for ($i = 0; $i < 2; $i++)
    {
        string $num = `textField -query -text $numberField[$i]`; // Access using the global array
        if ($num != "")
        {
            float $floatNum = $num;
            $numbers[size($numbers)] = $floatNum;
        }
    }

    float $result = calculate($operation, $numbers);
    textFieldGrp -edit -text $result resultField;
}

// Example of how to call the UI
calculatorUI();





// Example of how to call the UI
calculatorUI();
